//
// Copyright 2019 Olzhas Zhumabek <anonymous.from.applecity@gmail.com>
// Copyright 2021 Prathamesh Tagore <prathameshtagore@gmail.com>
//
// Use, modification and distribution are subject to the Boost Software License,
// Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at
// http://www.boost.org/LICENSE_1_0.txt)
//
#include <boost/gil/detail/math.hpp>
#include <boost/gil/image_processing/numeric.hpp>

#include <boost/core/lightweight_test.hpp>

#include <algorithm>

#include "test_utility_output_stream.hpp"

namespace gil = boost::gil;

// Following vectors are reference kernel vectors obtained from opencv squeezed in to one dimension.
// Number written after "dx_sobel" represents the order of derivative used.
// Ex. : "2" in "dx_sobel2" signifies that "dx_sobel2" contains refernce kernel for second order 
// sobel derivative,"dx" signifies that the derivative is for horizontal direction.
std::vector<float> dx_sobel2 {{
    -1,-2,0,2,1,-4,-8,0,8,4,-6,-12,0,12,6,-4,-8,0,8,4,-1,-2,0,2,1
}};

std::vector<float> dx_sobel3 {
    -1,   -4,   -5,     0,    5,     4,    1,
    -6,   -24,  -30,    0,   30,    24,    6,
    -15,  -60,  -75,    0,   75,    60,   15,
    -20,  -80, -100,    0,  100,    80,   20,
    -15,  -60,  -75,    0,   75,    60,   15,
    -6,   -24,  -30,    0,   30,    24,    6,
    -1,    -4,   -5,    0,    5,     4,    1
};

std::vector<float> dx_sobel4 {
    -1,   -6,  -14,  -14,    0,   14,   14,    6,    1,
    -8,  -48, -112, -112,    0,  112,  112,   48,    8,
   -28, -168, -392, -392,    0,  392,  392,  168,   28,
   -56, -336, -784, -784,    0,  784,  784,  336,   56,
   -70, -420, -980, -980,    0,  980,  980,  420,   70,
   -56, -336, -784, -784,    0,  784,  784,  336,   56,
   -28, -168, -392, -392,    0,  392,  392,  168,   28,
    -8,  -48, -112, -112,    0,  112,  112,   48,    8,
    -1,   -6,  -14,  -14,    0,   14,   14,    6,    1
};

std::vector<float> dx_sobel5 {
   -1.0000e+00, -8.0000e+00, -2.7000e+01, -4.8000e+01, -4.2000e+01,  0.0000e+00,
    4.2000e+01,  4.8000e+01,  2.7000e+01,  8.0000e+00,  1.0000e+00,
   -1.0000e+01, -8.0000e+01, -2.7000e+02, -4.8000e+02, -4.2000e+02,  0.0000e+00,
    4.2000e+02,  4.8000e+02,  2.7000e+02,  8.0000e+01,  1.0000e+01,
   -4.5000e+01, -3.6000e+02, -1.2150e+03, -2.1600e+03, -1.8900e+03,  0.0000e+00,
    1.8900e+03,  2.1600e+03,  1.2150e+03,  3.6000e+02,  4.5000e+01,
   -1.2000e+02, -9.6000e+02, -3.2400e+03, -5.7600e+03, -5.0400e+03,  0.0000e+00,
    5.0400e+03,  5.7600e+03,  3.2400e+03,  9.6000e+02,  1.2000e+02,
   -2.1000e+02, -1.6800e+03, -5.6700e+03, -1.0080e+04, -8.8200e+03,  0.0000e+00,
    8.8200e+03,  1.0080e+04,  5.6700e+03,  1.6800e+03,  2.1000e+02,
   -2.5200e+02, -2.0160e+03, -6.8040e+03, -1.2096e+04, -1.0584e+04,  0.0000e+00,
    1.0584e+04,  1.2096e+04,  6.8040e+03,  2.0160e+03,  2.5200e+02,
   -2.1000e+02, -1.6800e+03, -5.6700e+03, -1.0080e+04, -8.8200e+03,  0.0000e+00,
    8.8200e+03,  1.0080e+04,  5.6700e+03,  1.6800e+03,  2.1000e+02,
   -1.2000e+02, -9.6000e+02, -3.2400e+03, -5.7600e+03, -5.0400e+03,  0.0000e+00,
    5.0400e+03,  5.7600e+03,  3.2400e+03,  9.6000e+02,  1.2000e+02,
   -4.5000e+01, -3.6000e+02, -1.2150e+03, -2.1600e+03, -1.8900e+03,  0.0000e+00,
    1.8900e+03,  2.1600e+03,  1.2150e+03,  3.6000e+02,  4.5000e+01,
   -1.0000e+01, -8.0000e+01, -2.7000e+02, -4.8000e+02, -4.2000e+02,  0.0000e+00,
    4.2000e+02,  4.8000e+02,  2.7000e+02,  8.0000e+01,  1.0000e+01,
   -1.0000e+00, -8.0000e+00, -2.7000e+01, -4.8000e+01, -4.2000e+01,  0.0000e+00,
    4.2000e+01,  4.8000e+01,  2.7000e+01,  8.0000e+00,  1.0000e+00
};

std::vector<float> dx_sobel6 {
    -1.00000e+00, -1.00000e+01, -4.40000e+01, -1.10000e+02, -1.65000e+02,
    -1.32000e+02,  0.00000e+00,  1.32000e+02,  1.65000e+02,  1.10000e+02,
     4.40000e+01,  1.00000e+01,  1.00000e+00,
    -1.20000e+01, -1.20000e+02, -5.28000e+02, -1.32000e+03, -1.98000e+03,
    -1.58400e+03,  0.00000e+00,  1.58400e+03,  1.98000e+03,  1.32000e+03,
     5.28000e+02,  1.20000e+02,  1.20000e+01,
    -6.60000e+01, -6.60000e+02, -2.90400e+03, -7.26000e+03, -1.08900e+04,
    -8.71200e+03,  0.00000e+00,  8.71200e+03,  1.08900e+04,  7.26000e+03,
     2.90400e+03,  6.60000e+02,  6.60000e+01,
    -2.20000e+02, -2.20000e+03, -9.68000e+03, -2.42000e+04, -3.63000e+04,
    -2.90400e+04,  0.00000e+00,  2.90400e+04,  3.63000e+04,  2.42000e+04,
     9.68000e+03,  2.20000e+03,  2.20000e+02,
    -4.95000e+02, -4.95000e+03, -2.17800e+04, -5.44500e+04, -8.16750e+04,
    -6.53400e+04,  0.00000e+00,  6.53400e+04,  8.16750e+04,  5.44500e+04,
     2.17800e+04,  4.95000e+03,  4.95000e+02,
    -7.92000e+02, -7.92000e+03, -3.48480e+04, -8.71200e+04, -1.30680e+05,
    -1.04544e+05,  0.00000e+00,  1.04544e+05,  1.30680e+05,  8.71200e+04,
     3.48480e+04,  7.92000e+03,  7.92000e+02,
    -9.24000e+02, -9.24000e+03, -4.06560e+04, -1.01640e+05, -1.52460e+05,
    -1.21968e+05,  0.00000e+00,  1.21968e+05,  1.52460e+05,  1.01640e+05,
     4.06560e+04,  9.24000e+03,  9.24000e+02,
    -7.92000e+02, -7.92000e+03, -3.48480e+04, -8.71200e+04, -1.30680e+05,
    -1.04544e+05,  0.00000e+00,  1.04544e+05,  1.30680e+05,  8.71200e+04,
     3.48480e+04,  7.92000e+03,  7.92000e+02,
    -4.95000e+02, -4.95000e+03, -2.17800e+04 ,-5.44500e+04, -8.16750e+04,
    -6.53400e+04,  0.00000e+00,  6.53400e+04,  8.16750e+04,  5.44500e+04,
     2.17800e+04,  4.95000e+03,  4.95000e+02,
    -2.20000e+02, -2.20000e+03, -9.68000e+03, -2.42000e+04, -3.63000e+04,
    -2.90400e+04,  0.00000e+00,  2.90400e+04,  3.63000e+04,  2.42000e+04,
     9.68000e+03,  2.20000e+03,  2.20000e+02,
    -6.60000e+01, -6.60000e+02, -2.90400e+03, -7.26000e+03, -1.08900e+04,
    -8.71200e+03,  0.00000e+00,  8.71200e+03,  1.08900e+04,  7.26000e+03,
     2.90400e+03,  6.60000e+02,  6.60000e+01,
    -1.20000e+01, -1.20000e+02, -5.28000e+02, -1.32000e+03, -1.98000e+03,
    -1.58400e+03,  0.00000e+00,  1.58400e+03,  1.98000e+03,  1.32000e+03,
     5.28000e+02,  1.20000e+02,  1.20000e+01,
    -1.00000e+00, -1.00000e+01, -4.40000e+01, -1.10000e+02, -1.65000e+02,
    -1.32000e+02,  0.00000e+00,  1.32000e+02,  1.65000e+02 , 1.10000e+02,
     4.40000e+01,  1.00000e+01,  1.00000e+00
};

std::vector<float> dy_sobel2 {{
    -1,-4,-6,-4,-1,-2,-8,-12,-8,-2,0,0,0,0,0,2,8,12,8,2,1,4,6,4,1
}};

std::vector<float> dy_sobel3 {
   -1,   -6,  -15,  -20,  -15,   -6,  -1,
   -4,  -24,  -60,  -80,  -60,  -24,   -4,
   -5,  -30,  -75, -100,  -75,  -30,   -5,
    0,    0,    0,    0,    0,    0,    0,
    5,   30,   75,  100,   75,   30,    5,
    4,   24,   60,   80,   60,   24,    4,
    1,    6,   15,   20,   15,    6,    1
};

std::vector<float> dy_sobel4 {
   -1,   -8,  -28,  -56,  -70,  -56,  -28,   -8,   -1,
   -6,  -48, -168, -336, -420, -336, -168,  -48,   -6,
  -14, -112, -392, -784, -980, -784, -392, -112,  -14,
  -14, -112, -392, -784, -980, -784, -392, -112,  -14,
    0,    0,    0,    0,    0,    0,    0,    0,    0,
   14,  112,  392,  784,  980,  784,  392,  112,   14,
   14,  112,  392,  784,  980,  784,  392,  112,   14,
    6,   48,  168,  336,  420,  336,  168,   48,    6,
    1,    8,   28,   56,   70,   56,   28,    8,    1
};

std::vector<float> dy_sobel5 {
   -1.0000e+00, -1.0000e+01, -4.5000e+01, -1.2000e+02, -2.1000e+02, -2.5200e+02,
   -2.1000e+02, -1.2000e+02, -4.5000e+01, -1.0000e+01, -1.0000e+00,
   -8.0000e+00, -8.0000e+01, -3.6000e+02, -9.6000e+02, -1.6800e+03, -2.0160e+03,
   -1.6800e+03, -9.6000e+02, -3.6000e+02, -8.0000e+01, -8.0000e+00,
   -2.7000e+01, -2.7000e+02, -1.2150e+03, -3.2400e+03, -5.6700e+03, -6.8040e+03,
   -5.6700e+03, -3.2400e+03, -1.2150e+03, -2.7000e+02, -2.7000e+01,
   -4.8000e+01, -4.8000e+02, -2.1600e+03, -5.7600e+03, -1.0080e+04, -1.2096e+04,
   -1.0080e+04, -5.7600e+03, -2.1600e+03, -4.8000e+02, -4.8000e+01,
   -4.2000e+01, -4.2000e+02, -1.8900e+03, -5.0400e+03, -8.8200e+03, -1.0584e+04,
   -8.8200e+03, -5.0400e+03, -1.8900e+03, -4.2000e+02, -4.2000e+01,
    0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
    0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,  0.0000e+00,
    4.2000e+01,  4.2000e+02,  1.8900e+03,  5.0400e+03,  8.8200e+03,  1.0584e+04,
    8.8200e+03,  5.0400e+03,  1.8900e+03,  4.2000e+02,  4.2000e+01,
    4.8000e+01,  4.8000e+02,  2.1600e+03,  5.7600e+03,  1.0080e+04,  1.2096e+04,
    1.0080e+04,  5.7600e+03,  2.1600e+03,  4.8000e+02,  4.8000e+01,
    2.7000e+01,  2.7000e+02,  1.2150e+03,  3.2400e+03,  5.6700e+03,  6.8040e+03,
    5.6700e+03,  3.2400e+03,  1.2150e+03,  2.7000e+02,  2.7000e+01,
    8.0000e+00,  8.0000e+01,  3.6000e+02,  9.6000e+02,  1.6800e+03,  2.0160e+03,
    1.6800e+03,  9.6000e+02,  3.6000e+02,  8.0000e+01,  8.0000e+00,
    1.0000e+00,  1.0000e+01,  4.5000e+01,  1.2000e+02,  2.1000e+02,  2.5200e+02,
    2.1000e+02,  1.2000e+02,  4.5000e+01,  1.0000e+01,  1.0000e+00
};

std::vector<float> dy_sobel6 {
    -1.00000e+00, -1.20000e+01, -6.60000e+01, -2.20000e+02, -4.95000e+02,
    -7.92000e+02, -9.24000e+02, -7.92000e+02, -4.95000e+02, -2.20000e+02,
    -6.60000e+01, -1.20000e+01, -1.00000e+00,
    -1.00000e+01, -1.20000e+02, -6.60000e+02, -2.20000e+03, -4.95000e+03,
    -7.92000e+03, -9.24000e+03, -7.92000e+03, -4.95000e+03, -2.20000e+03,
    -6.60000e+02, -1.20000e+02, -1.00000e+01,
    -4.40000e+01, -5.28000e+02, -2.90400e+03, -9.68000e+03, -2.17800e+04,
    -3.48480e+04, -4.06560e+04, -3.48480e+04, -2.17800e+04, -9.68000e+03,
    -2.90400e+03, -5.28000e+02, -4.40000e+01,
    -1.10000e+02, -1.32000e+03, -7.26000e+03, -2.42000e+04, -5.44500e+04,
    -8.71200e+04, -1.01640e+05, -8.71200e+04, -5.44500e+04, -2.42000e+04,
    -7.26000e+03, -1.32000e+03, -1.10000e+02,
    -1.65000e+02, -1.98000e+03, -1.08900e+04, -3.63000e+04, -8.16750e+04,
    -1.30680e+05, -1.52460e+05, -1.30680e+05, -8.16750e+04, -3.63000e+04,
    -1.08900e+04, -1.98000e+03, -1.65000e+02,
    -1.32000e+02, -1.58400e+03, -8.71200e+03, -2.90400e+04, -6.53400e+04,
    -1.04544e+05, -1.21968e+05, -1.04544e+05, -6.53400e+04, -2.90400e+04,
    -8.71200e+03, -1.58400e+03, -1.32000e+02,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,  0.00000e+00,
     0.00000e+00,  0.00000e+00,  0.00000e+00,
     1.32000e+02,  1.58400e+03,  8.71200e+03,  2.90400e+04,  6.53400e+04,
     1.04544e+05,  1.21968e+05,  1.04544e+05,  6.53400e+04,  2.90400e+04,
     8.71200e+03,  1.58400e+03,  1.32000e+02,
     1.65000e+02,  1.98000e+03,  1.08900e+04,  3.63000e+04,  8.16750e+04,
     1.30680e+05,  1.52460e+05,  1.30680e+05,  8.16750e+04,  3.63000e+04,
     1.08900e+04,  1.98000e+03,  1.65000e+02,
     1.10000e+02,  1.32000e+03,  7.26000e+03,  2.42000e+04,  5.44500e+04,
     8.71200e+04,  1.01640e+05,  8.71200e+04,  5.44500e+04,  2.42000e+04,
     7.26000e+03,  1.32000e+03,  1.10000e+02,
     4.40000e+01,  5.28000e+02,  2.90400e+03,  9.68000e+03,  2.17800e+04,
     3.48480e+04,  4.06560e+04,  3.48480e+04,  2.17800e+04,  9.68000e+03,
     2.90400e+03,  5.28000e+02,  4.40000e+01,
     1.00000e+01,  1.20000e+02,  6.60000e+02,  2.20000e+03,  4.95000e+03,
     7.92000e+03,  9.24000e+03,  7.92000e+03,  4.95000e+03,  2.20000e+03,
     6.60000e+02,  1.20000e+02,  1.00000e+01,
     1.00000e+00,  1.20000e+01,  6.60000e+01,  2.20000e+02,  4.95000e+02,
     7.92000e+02,  9.24000e+02,  7.92000e+02,  4.95000e+02,  2.20000e+02,
     6.60000e+01,  1.20000e+01,  1.00000e+00
};

void test_dx_sobel_kernel()
{
    auto const kernel = gil::generate_dx_sobel(1);
    BOOST_TEST_ALL_EQ(kernel.begin(), kernel.end(), gil::detail::dx_sobel.begin(), gil::detail::dx_sobel.end());

    auto const kernel2 = gil::generate_dx_sobel(2);
    BOOST_TEST_ALL_EQ(kernel2.begin(), kernel2.end(), dx_sobel2.begin(), dx_sobel2.end());
    
    auto const kernel3 = gil::generate_dx_sobel(3);
    BOOST_TEST_ALL_EQ(kernel3.begin(), kernel3.end(), dx_sobel3.begin(), dx_sobel3.end());

    auto const kernel4 = gil::generate_dx_sobel(4);
    BOOST_TEST_ALL_EQ(kernel4.begin(), kernel4.end(), dx_sobel4.begin(), dx_sobel4.end());

    auto const kernel5 = gil::generate_dx_sobel(5);
    BOOST_TEST_ALL_EQ(kernel5.begin(), kernel5.end(), dx_sobel5.begin(), dx_sobel5.end());

    auto const kernel6 = gil::generate_dx_sobel(6);
    BOOST_TEST_ALL_EQ(kernel6.begin(), kernel6.end(), dx_sobel6.begin(), dx_sobel6.end());
}

void test_dx_scharr_kernel()
{
    auto const kernel = gil::generate_dx_scharr(1);
    BOOST_TEST_ALL_EQ(kernel.begin(), kernel.end(), gil::detail::dx_scharr.begin(), gil::detail::dx_scharr.end());
}

void test_dy_sobel_kernel()
{
    auto const kernel = gil::generate_dy_sobel(1);
    BOOST_TEST_ALL_EQ(kernel.begin(), kernel.end(), gil::detail::dy_sobel.begin(), gil::detail::dy_sobel.end());

    auto const kernel2 = gil::generate_dy_sobel(2);
    BOOST_TEST_ALL_EQ(kernel2.begin(), kernel2.end(), dy_sobel2.begin(), dy_sobel2.end());

    auto const kernel3 = gil::generate_dy_sobel(3);
    BOOST_TEST_ALL_EQ(kernel3.begin(), kernel3.end(), dy_sobel3.begin(), dy_sobel3.end());

    auto const kernel4 = gil::generate_dy_sobel(4);
    BOOST_TEST_ALL_EQ(kernel4.begin(), kernel4.end(), dy_sobel4.begin(), dy_sobel4.end());

    auto const kernel5 = gil::generate_dy_sobel(5);
    BOOST_TEST_ALL_EQ(kernel5.begin(), kernel5.end(), dy_sobel5.begin(), dy_sobel5.end());

    auto const kernel6 = gil::generate_dy_sobel(6);
    BOOST_TEST_ALL_EQ(kernel6.begin(), kernel6.end(), dy_sobel6.begin(), dy_sobel6.end());
}

void test_dy_scharr_kernel()
{
    auto const kernel = gil::generate_dy_scharr(1);
    BOOST_TEST_ALL_EQ(kernel.begin(), kernel.end(), gil::detail::dy_scharr.begin(), gil::detail::dy_scharr.end());
}

int main()
{
    test_dx_sobel_kernel();
    test_dx_scharr_kernel();
    test_dy_sobel_kernel();
    test_dy_scharr_kernel();
    return boost::report_errors();
}
